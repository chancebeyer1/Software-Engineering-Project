<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>740</x>
      <y>0</y>
      <w>310</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>Server
--
_-PORT: int = 8000_
-running: boolean
-nextId: int
-clientconnections: Vector&lt;ClientHandler&gt;
--
+Server()
-listen(): void
+peerconnection (Socket socket): void
-removeID(int id): void
--
Provides access to the server 
capabilities</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>870</x>
      <y>200</y>
      <w>90</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;

&lt;&lt;private&gt;&gt;

</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>700</x>
      <y>290</y>
      <w>380</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>type=actclass
ClientHandler
&lt;&lt;active&gt;&gt;
--
-go: boolean
-name: String
-id: int
-server: Server
--
+ClientHandler (int id, Socket socket, Server server)
+toString (): String
+getname (): String
+run (): void
--
Handles the peer-to-peer
communication between a client
and the server
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>550</x>
      <y>330</y>
      <w>170</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;
&lt;&lt;private&gt;&gt;</panel_attributes>
    <additional_attributes>150.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>270</x>
      <y>290</y>
      <w>290</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>NetworkAccess
Package::CommonClasses
--
-socket: Socket
-datain: BufferedReader
-dataout: DataOutputStream
--
+NetworkAccess (String ip, int port)
+NetworkAccess (Socket socket)
+readString(): String
+sendString 
  (String _msg, boolean acknowledge): 
  String
--
Provides peer-to-peer socket
between the client and the 
server along with the stream 
wrappers</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>150</x>
      <y>230</y>
      <w>140</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;
&lt;&lt;private&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0;120.0;110.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>60</x>
      <y>110</y>
      <w>210</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>Client
--

--
+Client (String ip, int port)
+disconnect (): void
--
Provides user access to the 
server</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>430</x>
      <y>50</y>
      <w>160</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>ServerSocket
Package::java.net

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>580</x>
      <y>50</y>
      <w>180</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;
m2=1
&lt;&lt;private&gt;&gt;

</panel_attributes>
    <additional_attributes>160.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>510</x>
      <y>210</y>
      <w>160</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Thread
Package::java.lang
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>660</x>
      <y>220</y>
      <w>140</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;120.0;10.0;120.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>500</x>
      <y>590</y>
      <w>560</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>CommandProcessor
--
_-commands: HashMap_
--
_+processCommand(String cmd, NetworkAccess na, ClientHandler ch): void_
--
Process all incoming commands to the server</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>810</x>
      <y>520</y>
      <w>140</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;uses statically&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>20</x>
      <y>750</y>
      <w>1070</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;10.0;1050.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>70</x>
      <y>770</y>
      <w>210</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>Client
--

--
+Client (String ip, int port)
+disconnect (): void
--
Provides user access to the 
server</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>160</x>
      <y>890</y>
      <w>90</w>
      <h>200</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;
&lt;&lt;private&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>30</x>
      <y>1070</y>
      <w>290</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>NetworkAccess
Package::CommonClasses
--
-socket: Socket
-datain: BufferedReader
-dataout: DataOutputStream
--
+NetworkAccess (String ip, int port)
+NetworkAccess (Socket socket)
+readString(): String
+sendString 
  (String _msg, boolean acknowledge): 
  String
--
Provides peer-to-peer socket
between the client and the 
server along with the stream 
wrappers</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>500</x>
      <y>1310</y>
      <w>160</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Thread
Package::java.lang
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>730</x>
      <y>1100</y>
      <w>310</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>Server
--
_-PORT: int = 8000_
-running: boolean
-nextId: int
-clientconnections: Vector&lt;ClientHandler&gt;
--
+Server()
-listen(): void
+peerconnection (Socket socket): void
-removeID(int id): void
--
Provides access to the server 
capabilities</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>860</x>
      <y>1300</y>
      <w>90</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;

&lt;&lt;private&gt;&gt;

</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>650</x>
      <y>1320</y>
      <w>140</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;120.0;10.0;120.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>610</x>
      <y>1430</y>
      <w>100</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;
&lt;&lt;private&gt;&gt;</panel_attributes>
    <additional_attributes>80.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>690</x>
      <y>1390</y>
      <w>380</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>type=actclass
ClientHandler
&lt;&lt;active&gt;&gt;
--
-go: boolean
-name: String
-id: int
-server: Server
--
+ClientHandler (int id, Socket socket, Server server)
+toString (): String
+getname (): String
+run (): void
--
Handles the peer-to-peer
communication between a client
and the server
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>800</x>
      <y>1620</y>
      <w>140</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;.
&lt;&lt;uses statically&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>490</x>
      <y>1680</y>
      <w>560</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>CommandProcessor
--
_-commands: HashMap_
--
_+processCommand(String cmd, NetworkAccess na, ClientHandler ch): void_
--
Process all incoming commands to the server</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>330</x>
      <y>1390</y>
      <w>290</w>
      <h>270</h>
    </coordinates>
    <panel_attributes>NetworkAccess
Package::CommonClasses
--
-socket: Socket
-datain: BufferedReader
-dataout: DataOutputStream
--
+NetworkAccess (String ip, int port)
+NetworkAccess (Socket socket)
+readString(): String
+sendString 
  (String _msg, boolean acknowledge): 
  String
--
Provides peer-to-peer socket
between the client and the 
server along with the stream 
wrappers</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>570</x>
      <y>1130</y>
      <w>180</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-&gt;
m2=1
&lt;&lt;private&gt;&gt;

</panel_attributes>
    <additional_attributes>160.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>420</x>
      <y>1130</y>
      <w>160</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>ServerSocket
Package::java.net

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>430</x>
      <y>800</y>
      <w>280</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>halign=left
Alternative showing Client and Server
as two separate Class Diagrams

Note that the NetworkAccess class is 
repeated even though it is a single 
class
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>20</x>
      <y>20</y>
      <w>340</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>halign=left
Class Diagram showing Client and Server
together in a single diagram

</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
